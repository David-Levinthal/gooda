From 5961835fb07f1fab6da99b827c8f43ec8054ff15 Mon Sep 17 00:00:00 2001
From: Stephane Eranian <eranian@gmail.com>
Date: Thu, 26 May 2016 06:18:12 +0200
Subject: [PATCH] add perf patches for Linux v4.5

This patch adds the perf tool patches for Gooda for
Linux v4.5.

    To apply to a 4.5 Lknux kernel tree:
    $ git am linux-v4.5/*

Signed-off-by: Stephane Eranian <eranian@google.com>
---
 .../0001-perf-tools-add-support-for-libpfm4.patch  | 670 +++++++++++++++++++++
 ...ecord-enable-multplexing-correction-via-R.patch |  66 ++
 2 files changed, 736 insertions(+)
 create mode 100644 gooda-analyzer/perf-patches/linux-v4.5/0001-perf-tools-add-support-for-libpfm4.patch
 create mode 100644 gooda-analyzer/perf-patches/linux-v4.5/0002-perf-record-enable-multplexing-correction-via-R.patch

diff --git a/gooda-analyzer/perf-patches/linux-v4.5/0001-perf-tools-add-support-for-libpfm4.patch b/gooda-analyzer/perf-patches/linux-v4.5/0001-perf-tools-add-support-for-libpfm4.patch
new file mode 100644
index 000000000000..203a26f9efc2
--- /dev/null
+++ b/gooda-analyzer/perf-patches/linux-v4.5/0001-perf-tools-add-support-for-libpfm4.patch
@@ -0,0 +1,670 @@
+From 6056cff1cee710ea63716ac66c6815a41cbeb0ce Mon Sep 17 00:00:00 2001
+From: Stephane Eranian <eranian@google.com>
+Date: Wed, 13 Jan 2016 19:34:32 +0100
+Subject: [PATCH 1/2] perf tools: add support for libpfm4
+
+This patch links perf with the libpfm4 library.
+This library contains all the hardware event tables for all
+processors supported by perf_events. This is a helper library
+that help convert from a symbolic event name to the event
+encoding required by the underlying kernel interface. This
+library is open-source and available from: http://perfmon2.sf.net.
+
+With this patch, it is possible to specify full hardware event
+by names. Hardware filters are also supported. Events must be
+specified via the --pfm-events and not -e option. Both options
+are active at the same time and it is possible to mix and match:
+
+$ perf stat --pfm-events inst_retired:any_p:c=1:i -e cycles ....
+$ perf record --pfm-events inst_retired:any_p:c=1:i ....
+$ perf top --pfm-events inst_retired:any_p:c=1:i ....
+
+You need to have libpfm4-dev package installed on your system.
+
+Signed-off-by: Stephane Eranian <eranian@google.com>
+---
+ tools/build/Makefile.feature             |   2 +
+ tools/build/feature/Makefile             |   4 +
+ tools/build/feature/test-libpfm4.c       |   8 ++
+ tools/perf/Documentation/perf-record.txt |   9 ++
+ tools/perf/Documentation/perf-stat.txt   |   8 ++
+ tools/perf/Documentation/perf-top.txt    |  10 ++
+ tools/perf/builtin-list.c                |  11 ++
+ tools/perf/builtin-record.c              |  16 +++
+ tools/perf/builtin-stat.c                |  17 +++
+ tools/perf/builtin-top.c                 |  17 +++
+ tools/perf/config/Makefile               |  10 ++
+ tools/perf/tests/make                    |   3 +
+ tools/perf/util/parse-events.c           | 232 +++++++++++++++++++++++++++++++
+ tools/perf/util/parse-events.h           |   5 +
+ tools/perf/util/pmu.c                    |  11 ++
+ tools/perf/util/pmu.h                    |   1 +
+ 16 files changed, 364 insertions(+)
+ create mode 100644 tools/build/feature/test-libpfm4.c
+
+diff --git a/tools/build/Makefile.feature b/tools/build/Makefile.feature
+index 02db3cdff20f..c73f7a147992 100644
+--- a/tools/build/Makefile.feature
++++ b/tools/build/Makefile.feature
+@@ -46,6 +46,7 @@ FEATURE_TESTS ?=			\
+ 	libpython			\
+ 	libpython-version		\
+ 	libslang			\
++	libpfm4				\
+ 	libunwind			\
+ 	pthread-attr-setaffinity-np	\
+ 	stackprotector-all		\
+@@ -68,6 +69,7 @@ FEATURE_DISPLAY ?=			\
+ 	libperl				\
+ 	libpython			\
+ 	libslang			\
++	libpfm4				\
+ 	libunwind			\
+ 	libdw-dwarf-unwind		\
+ 	zlib				\
+diff --git a/tools/build/feature/Makefile b/tools/build/feature/Makefile
+index bf8f0352264d..b18a53b678fb 100644
+--- a/tools/build/feature/Makefile
++++ b/tools/build/feature/Makefile
+@@ -23,6 +23,7 @@ FILES=					\
+ 	test-libpython.bin		\
+ 	test-libpython-version.bin	\
+ 	test-libslang.bin		\
++	test-libpfm4.bin		\
+ 	test-libunwind.bin		\
+ 	test-libunwind-debug-frame.bin	\
+ 	test-pthread-attr-setaffinity-np.bin	\
+@@ -105,6 +106,9 @@ endif
+ $(OUTPUT)test-libslang.bin:
+ 	$(BUILD) -I/usr/include/slang -lslang
+ 
++$(OUTPUT)test-libpfm4.bin:
++	$(BUILD) -lpfm
++
+ $(OUTPUT)test-gtk2.bin:
+ 	$(BUILD) $(shell $(PKG_CONFIG) --libs --cflags gtk+-2.0 2>/dev/null)
+ 
+diff --git a/tools/build/feature/test-libpfm4.c b/tools/build/feature/test-libpfm4.c
+new file mode 100644
+index 000000000000..a0edb9759da7
+--- /dev/null
++++ b/tools/build/feature/test-libpfm4.c
+@@ -0,0 +1,8 @@
++#include <sys/types.h>
++#include <perfmon/pfmlib.h>
++
++int main(void)
++{
++	(void)pfm_initialize();
++	return 0;
++}
+diff --git a/tools/perf/Documentation/perf-record.txt b/tools/perf/Documentation/perf-record.txt
+index fbceb631387c..d294b6b1f8f5 100644
+--- a/tools/perf/Documentation/perf-record.txt
++++ b/tools/perf/Documentation/perf-record.txt
+@@ -341,6 +341,15 @@ Specify vmlinux path which has debuginfo.
+ --buildid-all::
+ Record build-id of all DSOs regardless whether it's actually hit or not.
+ 
++--pfm-events event::
++this option is only available when perf is linked with the libpfm4 library
++(see http://perfmon2.sf.net). It allows passing hardware events as strings
++for all support processors. Event filters can also be used. As an example:
++perf record --pfm-events inst_retired:any_p:u:c=1:i. More than one event can
++be passed to the option using the comma separator. Hardware events and
++generic hardware events cannot be mixed together. The latter must be used
++with the -e option. The -e option and this one can be mixed and matched.
++
+ SEE ALSO
+ --------
+ linkperf:perf-stat[1], linkperf:perf-list[1]
+diff --git a/tools/perf/Documentation/perf-stat.txt b/tools/perf/Documentation/perf-stat.txt
+index 52ef7a9d50aa..34c077bfd405 100644
+--- a/tools/perf/Documentation/perf-stat.txt
++++ b/tools/perf/Documentation/perf-stat.txt
+@@ -60,6 +60,14 @@ OPTIONS
+ --tid=<tid>::
+         stat events on existing thread id (comma separated list)
+ 
++--pfm-events events::
++this option is only available when perf is linked with the libpfm4 library
++(see http://perfmon2.sf.net). It allows passing hardware events as strings
++for all support processors. Event filters can also be used. As an example:
++perf stat --pfm-events inst_retired:any_p:u:c=1:i. More than one event can
++be passed to the option using the comma separator. Hardware events and
++generic hardware events cannot be mixed together. The latter must be used
++with the -e option. The -e option and this one can be mixed and matched.
+ 
+ -a::
+ --all-cpus::
+diff --git a/tools/perf/Documentation/perf-top.txt b/tools/perf/Documentation/perf-top.txt
+index b0e60e17db38..6d1f6e8a43ad 100644
+--- a/tools/perf/Documentation/perf-top.txt
++++ b/tools/perf/Documentation/perf-top.txt
+@@ -233,6 +233,16 @@ Default is to monitor all CPUS.
+ --raw-trace::
+ 	When displaying traceevent output, do not use print fmt or plugins.
+ 
++--pfm-events event::
++This option is only available when perf is linked with the libpfm4 library
++(see http://perfmon2.sf.net). It allows passing hardware events as strings
++for all support processors. Event filters can also be used. As an example:
++perf top --pfm-events inst_retired:any_p:u:c=1:i. More than one event can
++be passed to the option using the comma separator. Hardware events and
++generic hardware events cannot be mixed together. The latter must be used
++with the -e option. The -e option and this one can be mixed and matched.
++
++
+ INTERACTIVE PROMPTING KEYS
+ --------------------------
+ 
+diff --git a/tools/perf/builtin-list.c b/tools/perf/builtin-list.c
+index 5e22db4684b8..af4632d87300 100644
+--- a/tools/perf/builtin-list.c
++++ b/tools/perf/builtin-list.c
+@@ -16,6 +16,10 @@
+ #include "util/pmu.h"
+ #include <subcmd/parse-options.h>
+ 
++#ifdef USE_LIBPFM
++#include <perfmon/pfmlib.h>
++#endif
++
+ int cmd_list(int argc, const char **argv, const char *prefix __maybe_unused)
+ {
+ 	int i;
+@@ -35,6 +39,13 @@ int cmd_list(int argc, const char **argv, const char *prefix __maybe_unused)
+ 			     PARSE_OPT_STOP_AT_NON_OPTION);
+ 
+ 	setup_pager();
++#ifdef USE_LIBPFM
++	{ int ret;
++	  ret = pfm_initialize();
++	  if (ret != PFM_SUCCESS)
++		fprintf(stderr, "warning libpfm failed to initialize: %s\n", pfm_strerror(ret));
++	}
++#endif
+ 
+ 	if (!raw_dump && pager_in_use())
+ 		printf("\nList of pre-defined events (to be used in -e):\n\n");
+diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
+index 319712a4e02b..b6b91aa05d35 100644
+--- a/tools/perf/builtin-record.c
++++ b/tools/perf/builtin-record.c
+@@ -37,6 +37,9 @@
+ #include <sched.h>
+ #include <sys/mman.h>
+ 
++#ifdef USE_LIBPFM
++#include <perfmon/pfmlib.h>
++#endif
+ 
+ struct record {
+ 	struct perf_tool	tool;
+@@ -1144,6 +1147,11 @@ struct option __record_options[] = {
+ 		   "file", "vmlinux pathname"),
+ 	OPT_BOOLEAN(0, "buildid-all", &record.buildid_all,
+ 		    "Record build-id of all DSOs regardless of hits"),
++#ifdef USE_LIBPFM
++       OPT_CALLBACK(0, "pfm-events", &record.evlist, "event",
++		    "libpfm4 event selector. use 'perf list' to list available events",
++		    parse_libpfm_events_option),
++#endif
+ 	OPT_END()
+ };
+ 
+@@ -1176,6 +1184,14 @@ int cmd_record(int argc, const char **argv, const char *prefix __maybe_unused)
+ # undef REASON
+ #endif
+ 
++#ifdef USE_LIBPFM
++	{ int ret;
++	  ret = pfm_initialize();
++	  if (ret != PFM_SUCCESS)
++		ui__warning("warning libpfm failed to initialize: %s\n", pfm_strerror(ret));
++	}
++#endif
++
+ 	rec->evlist = perf_evlist__new();
+ 	if (rec->evlist == NULL)
+ 		return -ENOMEM;
+diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c
+index 038e877081b6..f4fff876ef83 100644
+--- a/tools/perf/builtin-stat.c
++++ b/tools/perf/builtin-stat.c
+@@ -67,6 +67,10 @@
+ #include <sys/prctl.h>
+ #include <locale.h>
+ 
++#ifdef USE_LIBPFM
++#include <perfmon/pfmlib.h>
++#endif
++
+ #define DEFAULT_SEPARATOR	" "
+ #define CNTR_NOT_SUPPORTED	"<not supported>"
+ #define CNTR_NOT_COUNTED	"<not counted>"
+@@ -1237,6 +1241,11 @@ static const struct option stat_options[] = {
+ 		     "aggregate counts per thread", AGGR_THREAD),
+ 	OPT_UINTEGER('D', "delay", &initial_delay,
+ 		     "ms to wait before starting measurement after program start"),
++#ifdef USE_LIBPFM
++	OPT_CALLBACK(0, "pfm-events", &evsel_list, "event",
++		     "libpfm4 event selector. use 'perf list' to list available events",
++		     parse_libpfm_events_option),
++#endif
+ 	OPT_END()
+ };
+ 
+@@ -1819,6 +1828,14 @@ int cmd_stat(int argc, const char **argv, const char *prefix __maybe_unused)
+ 	unsigned int interval;
+ 	const char * const stat_subcommands[] = { "record", "report" };
+ 
++#ifdef USE_LIBPFM
++	{ int ret;
++	  ret = pfm_initialize();
++	  if (ret != PFM_SUCCESS)
++		fprintf(stderr, "warning libpfm failed to initialize: %s\n", pfm_strerror(ret));
++	}
++#endif
++
+ 	setlocale(LC_ALL, "");
+ 
+ 	evsel_list = perf_evlist__new();
+diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
+index bf01cbb0ef23..8b29ce034fb0 100644
+--- a/tools/perf/builtin-top.c
++++ b/tools/perf/builtin-top.c
+@@ -69,6 +69,10 @@
+ 
+ #include <linux/types.h>
+ 
++#ifdef USE_LIBPFM
++#include <perfmon/pfmlib.h>
++#endif
++
+ static volatile int done;
+ 
+ #define HEADER_LINE_NR  5
+@@ -1212,6 +1216,11 @@ int cmd_top(int argc, const char **argv, const char *prefix __maybe_unused)
+ 		     parse_branch_stack),
+ 	OPT_BOOLEAN(0, "raw-trace", &symbol_conf.raw_trace,
+ 		    "Show raw trace event output (do not use print fmt or plugins)"),
++#ifdef USE_LIBPFM
++	OPT_CALLBACK(0, "pfm-events", &top.evlist, "event",
++		     "libpfm4 event selector. use 'perf list' to list available events",
++		     parse_libpfm_events_option),
++#endif
+ 	OPT_END()
+ 	};
+ 	const char * const top_usage[] = {
+@@ -1223,6 +1232,14 @@ int cmd_top(int argc, const char **argv, const char *prefix __maybe_unused)
+ 	if (status < 0)
+ 		return status;
+ 
++#ifdef USE_LIBPFM
++	{ int ret;
++	  ret = pfm_initialize();
++	  if (ret != PFM_SUCCESS)
++		fprintf(stderr, "warning libpfm failed to initialize: %s\n", pfm_strerror(ret));
++	}
++#endif
++
+ 	top.evlist = perf_evlist__new();
+ 	if (top.evlist == NULL)
+ 		return -ENOMEM;
+diff --git a/tools/perf/config/Makefile b/tools/perf/config/Makefile
+index 511141b102e8..a55a5a552127 100644
+--- a/tools/perf/config/Makefile
++++ b/tools/perf/config/Makefile
+@@ -447,6 +447,16 @@ endif
+ grep-libs  = $(filter -l%,$(1))
+ strip-libs = $(filter-out -l%,$(1))
+ 
++ifndef NO_LIBPFM4
++	ifneq ($(feature-libpfm4), 1)
++		msg := $(warning libpfm4 not found, disables libpfm4 support. Please install libpfm4-dev);
++		NO_LIBPFM := 1
++	else
++		CFLAGS += -DUSE_LIBPFM
++		EXTLIBS += -lpfm
++	endif
++endif
++
+ ifdef NO_LIBPERL
+   CFLAGS += -DNO_LIBPERL
+ else
+diff --git a/tools/perf/tests/make b/tools/perf/tests/make
+index f918015512af..0eb01bd3d128 100644
+--- a/tools/perf/tests/make
++++ b/tools/perf/tests/make
+@@ -76,6 +76,7 @@ make_no_libdw_dwarf_unwind := NO_LIBDW_DWARF_UNWIND=1
+ make_no_backtrace   := NO_BACKTRACE=1
+ make_no_libnuma     := NO_LIBNUMA=1
+ make_no_libaudit    := NO_LIBAUDIT=1
++make_no_libpfm4	    := NO_LIBPFM=1
+ make_no_libbionic   := NO_LIBBIONIC=1
+ make_no_auxtrace    := NO_AUXTRACE=1
+ make_no_libbpf	    := NO_LIBBPF=1
+@@ -102,6 +103,7 @@ make_minimal        := NO_LIBPERL=1 NO_LIBPYTHON=1 NO_NEWT=1 NO_GTK2=1
+ make_minimal        += NO_DEMANGLE=1 NO_LIBELF=1 NO_LIBUNWIND=1 NO_BACKTRACE=1
+ make_minimal        += NO_LIBNUMA=1 NO_LIBAUDIT=1 NO_LIBBIONIC=1
+ make_minimal        += NO_LIBDW_DWARF_UNWIND=1 NO_AUXTRACE=1 NO_LIBBPF=1
++make_minimal        += NO_LIBPFM=1
+ 
+ # $(run) contains all available tests
+ run := make_pure
+@@ -127,6 +129,7 @@ run += make_no_libdw_dwarf_unwind
+ run += make_no_backtrace
+ run += make_no_libnuma
+ run += make_no_libaudit
++run += make_no_libpfm4
+ run += make_no_libbionic
+ run += make_no_auxtrace
+ run += make_no_libbpf
+diff --git a/tools/perf/util/parse-events.c b/tools/perf/util/parse-events.c
+index 813d9b272c81..a856265900c7 100644
+--- a/tools/perf/util/parse-events.c
++++ b/tools/perf/util/parse-events.c
+@@ -22,6 +22,11 @@
+ #include "cpumap.h"
+ #include "asm/bug.h"
+ 
++#ifdef USE_LIBPFM
++#include <perfmon/pfmlib_perf_event.h>
++static void print_libpfm_events(bool event_glob);
++#endif
++
+ #define MAX_NAME_LEN 100
+ 
+ #ifdef PARSER_DEBUG
+@@ -1975,6 +1980,10 @@ void print_events(const char *event_glob, bool name_only)
+ 	}
+ 
+ 	print_tracepoint_events(NULL, NULL, name_only);
++
++#ifdef USE_LIBPFM
++	print_libpfm_events(name_only);
++#endif
+ }
+ 
+ int parse_events__is_hardcoded_term(struct parse_events_term *term)
+@@ -2113,3 +2122,226 @@ char *parse_events_formats_error_string(char *additional_terms)
+ fail:
+ 	return NULL;
+ }
++
++#ifdef USE_LIBPFM
++static int
++parse_libpfm_event(const char **strp, struct perf_event_attr *attr)
++{
++	const char *p;
++	size_t l;
++	int ret;
++
++	ret = pfm_get_perf_event_encoding(*strp, PFM_PLM0|PFM_PLM3,
++					  attr, NULL, NULL);
++	if (ret == PFM_SUCCESS) {
++		p = strchr(*strp, ',');
++		if (p)
++			l = p - *strp;
++		else
++			l = strlen(*strp);
++
++		*strp += l;
++	}
++	return ret;
++}
++
++int parse_libpfm_events_option(const struct option *opt, const char *str,
++			       int unset __maybe_unused)
++{
++	struct perf_evlist *evlist = *(struct perf_evlist **)opt->value;
++	struct perf_event_attr attr;
++	struct perf_pmu *pmu;
++	struct perf_evsel *evsel;
++	const char *ostr;
++	int ret;
++
++	/*
++	 * for loading of cpumasks
++	 */
++	perf_pmu__scan(NULL);
++
++	for (;;) {
++		ostr = str;
++
++		memset(&attr, 0, sizeof(attr));
++
++		event_attr_init(&attr);
++
++		ret = parse_libpfm_event(&str, &attr);
++		if (ret != PFM_SUCCESS) {
++			fprintf(stderr, "failed to parse event %s : %s\n", str, pfm_strerror(ret));
++			return -1;
++		}
++
++		if (!(*str == 0 || *str == ',' || isspace(*str)))
++			return -1;
++
++		evsel = perf_evsel__new(&attr);
++		if (evsel == NULL)
++			return -1;
++
++		evsel->name = calloc(str - ostr + 1, 1);
++		if (!evsel->name) {
++			perf_evsel__delete(evsel);
++			return -1;
++		}
++		strncpy(evsel->name, ostr, str - ostr);
++		/*
++		 * use cpumask
++		 */
++		pmu = perf_pmu__find_by_type(attr.type);
++		if (pmu)
++			evsel->cpus = pmu->cpus;
++
++		perf_evlist__add(evlist, evsel);
++
++		if (*str == 0)
++			break;
++		if (*str == ',')
++			++str;
++	}
++	return 0;
++}
++
++
++
++static const char *srcs[PFM_ATTR_CTRL_MAX]={
++	[PFM_ATTR_CTRL_UNKNOWN] = "???",
++	[PFM_ATTR_CTRL_PMU] = "PMU",
++	[PFM_ATTR_CTRL_PERF_EVENT] = "perf_event",
++};
++
++static void
++print_attr_flags(pfm_event_attr_info_t *info)
++{
++	int n = 0;
++
++	if (info->is_dfl) {
++		printf("[default] ");
++		n++;
++	}
++
++	if (info->is_precise) {
++		printf("[precise] ");
++		n++;
++	}
++
++	if (!n)
++		printf("- ");
++}
++
++static void
++print_libpfm_detailed_events(pfm_pmu_info_t *pinfo, pfm_event_info_t *info)
++{
++	pfm_event_attr_info_t ainfo;
++	const char *src;
++	int j, ret;
++
++	ainfo.size = sizeof(ainfo);
++
++	printf("\nName  : %s\n", info->name);
++	printf("PMU   : %s\n", pinfo->name);
++	printf("Desc  : %s\n", info->desc);
++	printf("Equiv : %s\n", info->equiv ? info->equiv : "None");
++	printf("Code  : 0x%"PRIx64"\n", info->code);
++
++	pfm_for_each_event_attr(j, info) {
++		ret = pfm_get_event_attr_info(info->idx, j, PFM_OS_PERF_EVENT_EXT, &ainfo);
++		if (ret != PFM_SUCCESS)
++			continue;
++
++		if (ainfo.ctrl >= PFM_ATTR_CTRL_MAX)
++			ainfo.ctrl = PFM_ATTR_CTRL_UNKNOWN;
++
++		src = srcs[ainfo.ctrl];
++		switch(ainfo.type) {
++		case PFM_ATTR_UMASK:
++			printf("Umask : 0x%02"PRIx64" : %s: [%s] : ", ainfo.code, src, ainfo.name);
++			print_attr_flags(&ainfo);
++			printf(": %s\n", ainfo.desc);
++			break;
++		case PFM_ATTR_MOD_BOOL:
++			printf("Modif : %s: [%s] : %s (boolean)\n", src, ainfo.name, ainfo.desc);
++			break;
++		case PFM_ATTR_MOD_INTEGER:
++			printf("Modif : %s: [%s] : %s (integer)\n", src, ainfo.name, ainfo.desc);
++			break;
++		case PFM_ATTR_NONE:
++		case PFM_ATTR_RAW_UMASK:
++		case PFM_ATTR_MAX:
++		default:
++			printf("Attr  : %s: [%s] : %s\n", src, ainfo.name, ainfo.desc);
++		}
++	}
++}
++
++/*
++ * list all pmu::event:umask, pmu::event
++ * printed events may not be all valid combinations of umask for an event
++ */
++static void
++print_libpfm_simplified_events(pfm_pmu_info_t *pinfo, pfm_event_info_t *info)
++{
++	pfm_event_attr_info_t ainfo;
++	int j, ret;
++	int um = 0;
++
++	ainfo.size = sizeof(ainfo);
++
++	pfm_for_each_event_attr(j, info) {
++		ret = pfm_get_event_attr_info(info->idx, j, PFM_OS_PERF_EVENT_EXT, &ainfo);
++		if (ret != PFM_SUCCESS)
++			continue;
++
++		if (ainfo.type != PFM_ATTR_UMASK)
++			continue;
++
++		printf("%s::%s:%s\n", pinfo->name, info->name, ainfo.name);
++		um++;
++	}
++	if (um == 0)
++		printf("%s::%s\n", pinfo->name, info->name);
++}
++
++static void
++print_libpfm_events(bool name_only)
++{
++	pfm_event_info_t info;
++	pfm_pmu_info_t pinfo;
++	pfm_event_attr_info_t ainfo;
++	int i, p, ret;
++
++	/* initialize to zero to indicate ABI version */
++	info.size  = sizeof(info);
++	pinfo.size = sizeof(pinfo);
++	ainfo.size = sizeof(ainfo);
++
++	putchar('\n');
++
++	pfm_for_all_pmus(p) {
++		ret = pfm_get_pmu_info(p, &pinfo);
++		if (ret != PFM_SUCCESS)
++			continue;
++
++		/* ony print events that are supported by host HW */
++		if (!pinfo.is_present)
++			continue;
++
++		/* handled by perf directly */
++		if (pinfo.pmu == PFM_PMU_PERF_EVENT)
++			continue;
++
++		for (i = pinfo.first_event; i != -1; i = pfm_get_event_next(i)) {
++
++			ret = pfm_get_event_info(i, PFM_OS_PERF_EVENT_EXT, &info);
++			if (ret != PFM_SUCCESS)
++				continue;
++
++			if (!name_only)
++				print_libpfm_detailed_events(&pinfo, &info);
++			else
++				print_libpfm_simplified_events(&pinfo, &info);
++		}
++	}
++}
++#endif
+diff --git a/tools/perf/util/parse-events.h b/tools/perf/util/parse-events.h
+index f1a6db107241..d6fbee53aaee 100644
+--- a/tools/perf/util/parse-events.h
++++ b/tools/perf/util/parse-events.h
+@@ -36,6 +36,11 @@ extern int parse_events_terms(struct list_head *terms, const char *str);
+ extern int parse_filter(const struct option *opt, const char *str, int unset);
+ extern int exclude_perf(const struct option *opt, const char *arg, int unset);
+ 
++#ifdef USE_LIBPFM
++extern int parse_libpfm_events_option(const struct option *opt, const char *str,
++			       int unset);
++#endif
++
+ #define EVENTS_HELP_MAX (128*1024)
+ 
+ enum perf_pmu_event_symbol_type {
+diff --git a/tools/perf/util/pmu.c b/tools/perf/util/pmu.c
+index b597bcc8fc78..9667ac8abff2 100644
+--- a/tools/perf/util/pmu.c
++++ b/tools/perf/util/pmu.c
+@@ -507,6 +507,17 @@ static struct perf_pmu *pmu_find(const char *name)
+ 	return NULL;
+ }
+ 
++struct perf_pmu *perf_pmu__find_by_type(unsigned type)
++{
++	struct perf_pmu *pmu;
++
++	list_for_each_entry(pmu, &pmus, list)
++		if (pmu->type == type)
++			return pmu;
++
++	return NULL;
++}
++
+ struct perf_pmu *perf_pmu__scan(struct perf_pmu *pmu)
+ {
+ 	/*
+diff --git a/tools/perf/util/pmu.h b/tools/perf/util/pmu.h
+index 5d7e84466bee..68b6036d6cc0 100644
+--- a/tools/perf/util/pmu.h
++++ b/tools/perf/util/pmu.h
+@@ -68,6 +68,7 @@ void perf_pmu__set_format(unsigned long *bits, long from, long to);
+ int perf_pmu__format_parse(char *dir, struct list_head *head);
+ 
+ struct perf_pmu *perf_pmu__scan(struct perf_pmu *pmu);
++struct perf_pmu *perf_pmu__find_by_type(unsigned type);
+ 
+ void print_pmu_events(const char *event_glob, bool name_only);
+ bool pmu_have_event(const char *pname, const char *name);
+-- 
+1.9.1
+
diff --git a/gooda-analyzer/perf-patches/linux-v4.5/0002-perf-record-enable-multplexing-correction-via-R.patch b/gooda-analyzer/perf-patches/linux-v4.5/0002-perf-record-enable-multplexing-correction-via-R.patch
new file mode 100644
index 000000000000..a1e2d04d2ad5
--- /dev/null
+++ b/gooda-analyzer/perf-patches/linux-v4.5/0002-perf-record-enable-multplexing-correction-via-R.patch
@@ -0,0 +1,66 @@
+From 224ddcbbefc9f37f19a695488f1da7d9479022c8 Mon Sep 17 00:00:00 2001
+From: Stephane Eranian <eranian@google.com>
+Date: Wed, 16 May 2012 15:44:53 +0200
+Subject: [PATCH 2/2] perf record: enable multplexing correction via -R
+
+This patch allows perf record to request that evdnt
+timing be recorded in each sample. The timing consists
+of time_enabled and time_running. Those measures are
+used to compute the multiplexing correction, i.e., how
+how the event was actually measured by the hardware.
+
+To activate it, the user must use:
+$ perf record -a -R ....
+
+It works by forcing PERF_SAMPLE_READ in raw mode (-R),
+i.e., reading of the event group in each sample, although
+perf record does not group events. The side effect is that
+both time_running and time_enable get captured + empty
+four byte RAW section. This way we leverage existing perf
+record mode and do not add yet another option.
+
+Signed-off-by: Stephane Eranian <eranian@google.com>
+---
+ tools/perf/Documentation/perf-record.txt | 2 ++
+ tools/perf/util/evsel.c                  | 5 +++++
+ 2 files changed, 7 insertions(+)
+
+diff --git a/tools/perf/Documentation/perf-record.txt b/tools/perf/Documentation/perf-record.txt
+index d294b6b1f8f5..49cf63b99652 100644
+--- a/tools/perf/Documentation/perf-record.txt
++++ b/tools/perf/Documentation/perf-record.txt
+@@ -199,6 +199,8 @@ OPTIONS
+ -R::
+ --raw-samples::
+ Collect raw sample records from all opened counters (default for tracepoint counters).
++With this option, each sample includes at least: CPU, timestamp, time running/enabled
++(multiplexing scaling factor).
+ 
+ -C::
+ --cpu::
+diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c
+index cdbaf9b51e42..5c5b5aa227a1 100644
+--- a/tools/perf/util/evsel.c
++++ b/tools/perf/util/evsel.c
+@@ -740,6 +740,9 @@ void perf_evsel__config(struct perf_evsel *evsel, struct record_opts *opts)
+ 
+ 	attr->sample_id_all = perf_missing_features.sample_id_all ? 0 : 1;
+ 	attr->inherit	    = !opts->no_inherit;
++	attr->read_format   = PERF_FORMAT_TOTAL_TIME_ENABLED |
++			      PERF_FORMAT_TOTAL_TIME_RUNNING |
++			      PERF_FORMAT_ID;
+ 
+ 	perf_evsel__set_sample_bit(evsel, IP);
+ 	perf_evsel__set_sample_bit(evsel, TID);
+@@ -833,6 +836,8 @@ void perf_evsel__config(struct perf_evsel *evsel, struct record_opts *opts)
+ 		perf_evsel__set_sample_bit(evsel, TIME);
+ 		perf_evsel__set_sample_bit(evsel, RAW);
+ 		perf_evsel__set_sample_bit(evsel, CPU);
++		perf_evsel__set_sample_bit(evsel, ID);
++		perf_evsel__set_sample_bit(evsel, READ);
+ 	}
+ 
+ 	if (opts->sample_address)
+-- 
+1.9.1
+
-- 
1.9.1

