
This patch links perf with the libpfm4 library.
This library contains all the hardware event tables for all
processors supported by perf_events. This is a helper library
that help convert from a symbolic event name to the event
encoding required by the underlying kernel interface. This
library is open-source and available from: http://perfmon2.sf.net.

With this patch, it is possible to specify full hardware event
by names. Hardware filters are also supported. Events must be
specified via the --pfm-events and not -e option. Both options
are active at the same time and it is possible to mix and match:

$ perf stat --pfm-events inst_retired:any_p:c=1:i -e cycles ....

You need to have libpfm4 installed on your system.

Signed-off-by: Stephane Eranian <eranian@google.com>
---
diff -urNp linux-3.3.4.orig/tools/perf/Documentation/perf-record.txt linux-3.3.4/tools/perf/Documentation/perf-record.txt
--- linux-3.3.4.orig/tools/perf/Documentation/perf-record.txt	2012-04-27 19:17:35.000000000 +0200
+++ linux-3.3.4/tools/perf/Documentation/perf-record.txt	2012-05-01 19:08:10.805964531 +0200
@@ -148,6 +148,15 @@ an empty cgroup (monitor all the time) u
 corresponding events, i.e., they always refer to events defined earlier on the command
 line.
 
+--pfm-events event::
+this option is only available when perf is linked with the libpfm4 library
+(see http://perfmon2.sf.net). It allows passing hardware events as strings
+for all support processors. Event filters can also be used. As an example:
+perf record --pfm-events inst_retired:any_p:u:c=1:i. More than one event can
+be passed to the option using the comma separator. Hardware events and
+generic hardware events cannot be mixed together. The latter must be used
+with the -e option. The -e option and this one can be mixed and matched.
+
 SEE ALSO
 --------
 linkperf:perf-stat[1], linkperf:perf-list[1]
diff -urNp linux-3.3.4.orig/tools/perf/Documentation/perf-stat.txt linux-3.3.4/tools/perf/Documentation/perf-stat.txt
--- linux-3.3.4.orig/tools/perf/Documentation/perf-stat.txt	2012-04-27 19:17:35.000000000 +0200
+++ linux-3.3.4/tools/perf/Documentation/perf-stat.txt	2012-05-01 19:06:25.413966002 +0200
@@ -108,7 +108,14 @@ with it.  --append may be used here.  Ex
      3>results  perf stat --log-fd 3          -- $cmd
      3>>results perf stat --log-fd 3 --append -- $cmd
 
-
+--pfm-events events::
+this option is only available when perf is linked with the libpfm4 library
+(see http://perfmon2.sf.net). It allows passing hardware events as strings
+for all support processors. Event filters can also be used. As an example:
+perf stat --pfm-events inst_retired:any_p:u:c=1:i. More than one event can
+be passed to the option using the comma separator. Hardware events and
+generic hardware events cannot be mixed together. The latter must be used
+with the -e option. The -e option and this one can be mixed and matched.
 
 EXAMPLES
 --------
diff -urNp linux-3.3.4.orig/tools/perf/Makefile linux-3.3.4/tools/perf/Makefile
--- linux-3.3.4.orig/tools/perf/Makefile	2012-04-27 19:17:35.000000000 +0200
+++ linux-3.3.4/tools/perf/Makefile	2012-05-01 18:48:12.534964713 +0200
@@ -480,6 +480,16 @@ else
 	endif
 endif
 
+ifndef NO_LIBPFM
+	FLAGS_LIBPFM=$(ALL_CFLAGS) $(ALL_LDFLAGS) $(EXTLIBS) -lpfm
+	ifneq ($(call try-cc,$(SOURCE_LIBPFM),$(FLAGS_LIBPFM)),y)
+		msg := $(warning libpfm4 not found, disables libpfm4 support. Please install libpfm4-dev);
+	else
+		BASIC_CFLAGS += -DUSE_LIBPFM
+		EXTLIBS += -lpfm
+	endif
+endif
+
 ifdef NO_LIBPERL
 	BASIC_CFLAGS += -DNO_LIBPERL
 else
diff -urNp linux-3.3.4.orig/tools/perf/builtin-list.c linux-3.3.4/tools/perf/builtin-list.c
--- linux-3.3.4.orig/tools/perf/builtin-list.c	2012-04-27 19:17:35.000000000 +0200
+++ linux-3.3.4/tools/perf/builtin-list.c	2012-05-01 18:48:12.534964713 +0200
@@ -14,10 +14,22 @@
 #include "util/parse-events.h"
 #include "util/cache.h"
 
+#ifdef USE_LIBPFM
+#include <perfmon/pfmlib.h>
+#endif
+
 int cmd_list(int argc, const char **argv, const char *prefix __used)
 {
 	setup_pager();
 
+#ifdef USE_LIBPFM
+	{ int ret;
+	  ret = pfm_initialize();
+	  if (ret != PFM_SUCCESS)
+		fprintf(stderr, "warning libpfm failed to initialize: %s\n", pfm_strerror(ret));
+	}
+#endif
+
 	if (argc == 1)
 		print_events(NULL);
 	else {
diff -urNp linux-3.3.4.orig/tools/perf/builtin-record.c linux-3.3.4/tools/perf/builtin-record.c
--- linux-3.3.4.orig/tools/perf/builtin-record.c	2012-04-27 19:17:35.000000000 +0200
+++ linux-3.3.4/tools/perf/builtin-record.c	2012-05-01 18:49:43.683964685 +0200
@@ -31,6 +31,10 @@
 #include <sched.h>
 #include <sys/mman.h>
 
+#ifdef USE_LIBPFM
+#include <perfmon/pfmlib.h>
+#endif
+
 enum write_mode_t {
 	WRITE_FORCE,
 	WRITE_APPEND
@@ -738,6 +742,11 @@ const struct option record_options[] = {
 	OPT_CALLBACK('G', "cgroup", &record.evlist, "name",
 		     "monitor event in cgroup name only",
 		     parse_cgroups),
+#ifdef USE_LIBPFM
+	OPT_CALLBACK(0, "pfm-events", &record.evlist, "event",
+		     "libpfm4 event selector. use 'perf list' to list available events",
+		     parse_libpfm_events_option),
+#endif
 	OPT_END()
 };
 
@@ -748,6 +757,14 @@ int cmd_record(int argc, const char **ar
 	struct perf_evlist *evsel_list;
 	struct perf_record *rec = &record;
 
+#ifdef USE_LIBPFM
+	{ int ret;
+	  ret = pfm_initialize();
+	  if (ret != PFM_SUCCESS)
+		ui__warning("warning libpfm failed to initialize: %s\n", pfm_strerror(ret));
+	}
+#endif
+ 
 	perf_header__set_cmdline(argc, argv);
 
 	evsel_list = perf_evlist__new(NULL, NULL);
diff -urNp linux-3.3.4.orig/tools/perf/builtin-stat.c linux-3.3.4/tools/perf/builtin-stat.c
--- linux-3.3.4.orig/tools/perf/builtin-stat.c	2012-04-27 19:17:35.000000000 +0200
+++ linux-3.3.4/tools/perf/builtin-stat.c	2012-05-01 18:48:12.535964701 +0200
@@ -60,6 +60,10 @@
 #include <math.h>
 #include <locale.h>
 
+#ifdef USE_LIBPFM
+#include <perfmon/pfmlib.h>
+#endif
+
 #define DEFAULT_SEPARATOR	" "
 #define CNTR_NOT_SUPPORTED	"<not supported>"
 #define CNTR_NOT_COUNTED	"<not counted>"
@@ -1078,6 +1082,11 @@ static const struct option options[] = {
 	OPT_BOOLEAN(0, "append", &append_file, "append to the output file"),
 	OPT_INTEGER(0, "log-fd", &output_fd,
 		    "log output to fd, instead of stderr"),
+#ifdef USE_LIBPFM
+	OPT_CALLBACK(0, "pfm-events", &evsel_list, "event",
+		     "libpfm4 event selector. use 'perf list' to list available events",
+		     parse_libpfm_events_option),
+#endif
 	OPT_END()
 };
 
@@ -1125,6 +1134,14 @@ int cmd_stat(int argc, const char **argv
 	int status = -ENOMEM;
 	const char *mode;
 
+#ifdef USE_LIBPFM
+	{ int ret;
+	  ret = pfm_initialize();
+	  if (ret != PFM_SUCCESS)
+		fprintf(stderr, "warning libpfm failed to initialize: %s\n", pfm_strerror(ret));
+	}
+#endif
+
 	setlocale(LC_ALL, "");
 
 	evsel_list = perf_evlist__new(NULL, NULL);
diff -urNp linux-3.3.4.orig/tools/perf/config/feature-tests.mak linux-3.3.4/tools/perf/config/feature-tests.mak
--- linux-3.3.4.orig/tools/perf/config/feature-tests.mak	2012-04-27 19:17:35.000000000 +0200
+++ linux-3.3.4/tools/perf/config/feature-tests.mak	2012-05-01 18:48:12.535964701 +0200
@@ -65,6 +65,20 @@ int main(void)
 endef
 endif
 
+ifndef NO_LIBPFM
+define SOURCE_LIBPFM
+#include <sys/types.h>
+#include <perfmon/pfmlib.h>
+
+int main(void)
+{
+	int ret;
+	ret = pfm_initialize();
+	return 0;
+}
+endef
+endif
+
 ifndef NO_LIBPERL
 define SOURCE_PERL_EMBED
 #include <EXTERN.h>
Binary files linux-3.3.4.orig/tools/perf/perf.data and linux-3.3.4/tools/perf/perf.data differ
diff -urNp linux-3.3.4.orig/tools/perf/util/parse-events.c linux-3.3.4/tools/perf/util/parse-events.c
--- linux-3.3.4.orig/tools/perf/util/parse-events.c	2012-04-27 19:17:35.000000000 +0200
+++ linux-3.3.4/tools/perf/util/parse-events.c	2012-05-01 18:50:35.899964625 +0200
@@ -1052,6 +1052,11 @@ int print_hwcache_events(const char *eve
 	return printed;
 }
 
+#ifdef USE_LIBPFM
+#include <perfmon/pfmlib_perf_event.h>
+static void print_libpfm_events(void);
+#endif
+
 #define MAX_NAME_LEN 100
 
 /*
@@ -1112,4 +1117,177 @@ void print_events(const char *event_glob
 	printf("\n");
 
 	print_tracepoint_events(NULL, NULL);
+
+#ifdef USE_LIBPFM
+	print_libpfm_events();
+#endif
+}
+
+
+#ifdef USE_LIBPFM
+static int
+parse_libpfm_event(const char **strp, struct perf_event_attr *attr)
+{
+	const char *p;
+	size_t l;
+	int ret;
+
+	ret = pfm_get_perf_event_encoding(*strp, PFM_PLM0|PFM_PLM3,
+					  attr, NULL, NULL);
+	if (ret == PFM_SUCCESS) {
+		p = strchr(*strp, ',');
+		if (p)
+			l = p - *strp;
+		else
+			l = strlen(*strp);
+
+		*strp += l;
+	} else {
+		pr_warning("unsupported event %s\n", *strp);
+	}
+	return ret;
+}
+
+int parse_libpfm_events_option(const struct option *opt, const char *str,
+			       int unset __used)
+{
+	struct perf_evlist *evlist = *(struct perf_evlist **)opt->value;
+	struct perf_event_attr attr;
+	struct perf_evsel *evsel;
+	const char *ostr;
+	int ret;
+
+	for (;;) {
+		ostr = str;
+
+		memset(&attr, 0, sizeof(attr));
+
+		event_attr_init(&attr);
+
+		ret = parse_libpfm_event(&str, &attr);
+		if (ret != PFM_SUCCESS)
+			return -1;
+
+		if (!(*str == 0 || *str == ',' || isspace(*str)))
+			return -1;
+
+		evsel = perf_evsel__new(&attr, evlist->nr_entries);
+		if (evsel == NULL)
+			return -1;
+
+		evsel->name = calloc(str - ostr + 1, 1);
+		if (!evsel->name) {
+			perf_evsel__delete(evsel);
+			return -1;
+		}
+		strncpy(evsel->name, ostr, str - ostr);
+
+		perf_evlist__add(evlist, evsel);
+
+		if (*str == 0)
+			break;
+		if (*str == ',')
+			++str;
+	}
+	return 0;
+}
+
+
+
+static const char *srcs[PFM_ATTR_CTRL_MAX]={
+	[PFM_ATTR_CTRL_UNKNOWN] = "???",
+	[PFM_ATTR_CTRL_PMU] = "PMU",
+	[PFM_ATTR_CTRL_PERF_EVENT] = "perf_event",
+};
+
+static void
+print_attr_flags(pfm_event_attr_info_t *info)
+{
+	int n = 0;
+
+	if (info->is_dfl) {
+		printf("[default] ");
+		n++;
+	}
+
+	if (info->is_precise) {
+		printf("[precise] ");
+		n++;
+	}
+
+	if (!n)
+		printf("- ");
+}
+
+static void
+print_libpfm_events(void)
+{
+	pfm_event_info_t info;
+	pfm_pmu_info_t pinfo;
+	pfm_event_attr_info_t ainfo;
+	const char *src;
+	int i, j, p, ret;
+
+	/* initialize to zero to indicate ABI version */
+	info.size  = sizeof(info);
+	pinfo.size = sizeof(pinfo);
+	ainfo.size = sizeof(ainfo);
+
+	putchar('\n');
+
+	pfm_for_all_pmus(p) {
+		ret = pfm_get_pmu_info(p, &pinfo);
+		if (ret != PFM_SUCCESS)
+			continue;
+
+		/* ony print events that are supported by host HW */
+		if (!pinfo.is_present)
+			continue;
+
+		/* handled by perf directly */
+		if (pinfo.pmu == PFM_PMU_PERF_EVENT)
+			continue;
+
+		for (i = pinfo.first_event; i != -1; i = pfm_get_event_next(i)) {
+
+			ret = pfm_get_event_info(i, PFM_OS_PERF_EVENT_EXT, &info);
+			if (ret != PFM_SUCCESS)
+				continue;
+
+			printf("\nName  : %s\n", info.name);
+			printf("PMU   : %s\n", pinfo.name);
+			printf("Desc  : %s\n", info.desc);
+			printf("Equiv : %s\n", info.equiv ? info.equiv : "None");
+			printf("Code  : 0x%"PRIx64"\n", info.code);
+			pfm_for_each_event_attr(j, &info) {
+				ret = pfm_get_event_attr_info(info.idx, j, PFM_OS_PERF_EVENT_EXT, &ainfo);
+				if (ret != PFM_SUCCESS)
+					continue;
+
+				if (ainfo.ctrl >= PFM_ATTR_CTRL_MAX)
+					ainfo.ctrl = PFM_ATTR_CTRL_UNKNOWN;
+
+				src = srcs[ainfo.ctrl];
+				switch(ainfo.type) {
+				case PFM_ATTR_UMASK:
+					printf("Umask : 0x%02"PRIx64" : %s: [%s] : ", ainfo.code, src, ainfo.name);
+					print_attr_flags(&ainfo);
+					printf(": %s\n", ainfo.desc);
+					break;
+				case PFM_ATTR_MOD_BOOL:
+					printf("Modif : %s: [%s] : %s (boolean)\n", src, ainfo.name, ainfo.desc);
+					break;
+				case PFM_ATTR_MOD_INTEGER:
+					printf("Modif : %s: [%s] : %s (integer)\n", src, ainfo.name, ainfo.desc);
+					break;
+				case PFM_ATTR_NONE:
+				case PFM_ATTR_RAW_UMASK:
+				case PFM_ATTR_MAX:
+				default:
+					printf("Attr  : %s: [%s] : %s\n", src, ainfo.name, ainfo.desc);
+				}
+			}
+		}
+	}
 }
+#endif
diff -urNp linux-3.3.4.orig/tools/perf/util/parse-events.h linux-3.3.4/tools/perf/util/parse-events.h
--- linux-3.3.4.orig/tools/perf/util/parse-events.h	2012-04-27 19:17:35.000000000 +0200
+++ linux-3.3.4/tools/perf/util/parse-events.h	2012-05-01 18:48:12.536964694 +0200
@@ -31,6 +31,11 @@ extern int parse_events(struct perf_evli
 			int unset);
 extern int parse_filter(const struct option *opt, const char *str, int unset);
 
+#ifdef USE_LIBPFM
+extern int parse_libpfm_events_option(const struct option *opt, const char *str,
+			       int unset);
+#endif
+
 #define EVENTS_HELP_MAX (128*1024)
 
 void print_events(const char *event_glob);
